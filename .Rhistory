library(robustDESeq)
library(airway)
data("airway")
offsite_dir <- .get_config_path("LOCAL_SEQUENTIAL_TEST_DATA_DIR")
# obtain the expression matrix
expression_matrix <- assays(airway)$counts
# compute the lib sizes
lib_sizes <- colSums(expression_matrix)
# determine the genes with zero expression across samples; remove those
zero_gene <- apply(X = expression_matrix, MARGIN = 1, FUN = function(r) all(r == 0))
expression_matrix <- expression_matrix[!zero_gene,]
# normalize the counts by dividing by the library size
expression_matrix_norm <- apply(X = expression_matrix, MARGIN = 1, FUN = function(r) {
(r/lib_sizes) * 10000
}) |> t()
# extract each of the genes
Y_list <- apply(X = expression_matrix_norm, MARGIN = 1, identity, simplify = FALSE)
Y_list <- Y_list[1:2000]
# obtain the treatment idx
x <- as.integer(colData(airway)$dex == "trt")
print("Running asymptotic test")
asymptotic_time <- system.time({asymptotic_res <- run_mann_whitney_test_asymptotic(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
implementation = "custom",
alpha = 0.1)})
print("Running adaptive finite sample test")
finite_sample_adaptive_time <- system.time({finite_sample_adaptive_res <- run_mann_whitney_test_permutations(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
h = 15,
alpha = 0.1,
adaptive_permutation_test = TRUE)})
print("Running classical finite sample test")
finite_sample_classical_time <- system.time({finite_sample_classical_res <- run_mann_whitney_test_permutations(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
alpha = 0.1,
adaptive_permutation_test = FALSE)})
asymptotic_time
finite_sample_adaptive_time
0.294/0.166
finite_sample_classical_time
74.997/0.294
head(asymptotic_res)
head(finite_sample_adaptive_res)
head(finite_sample_classical_res)
factorial(8)
40000
40000/100
library(robustDESeq)
library(airway)
data("airway")
offsite_dir <- .get_config_path("LOCAL_SEQUENTIAL_TEST_DATA_DIR")
source("~/.research_config")
source("~/.Rprofile")
library(robustDESeq)
library(airway)
data("airway")
offsite_dir <- .get_config_path("LOCAL_SEQUENTIAL_TEST_DATA_DIR")
# obtain the expression matrix
expression_matrix <- assays(airway)$counts
# compute the lib sizes
lib_sizes <- colSums(expression_matrix)
# determine the genes with zero expression across samples; remove those
zero_gene <- apply(X = expression_matrix, MARGIN = 1, FUN = function(r) all(r == 0))
expression_matrix <- expression_matrix[!zero_gene,]
# normalize the counts by dividing by the library size
expression_matrix_norm <- apply(X = expression_matrix, MARGIN = 1, FUN = function(r) {
(r/lib_sizes) * 10000
}) |> t()
# extract each of the genes
Y_list <- apply(X = expression_matrix_norm, MARGIN = 1, identity, simplify = FALSE)
Y_list <- Y_list[1:1000]
Y_list <- Y_list[1:500]
# obtain the treatment idx
x <- as.integer(colData(airway)$dex == "trt")
print("Running asymptotic test")
asymptotic_time <- system.time({asymptotic_res <- run_mann_whitney_test_asymptotic(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
implementation = "custom",
alpha = 0.1)})
print("Running adaptive finite sample test")
finite_sample_adaptive_time <- system.time({finite_sample_adaptive_res <- run_mann_whitney_test_permutations(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
h = 15,
alpha = 0.1,
adaptive_permutation_test = TRUE)})
print("Running classical finite sample test")
finite_sample_classical_time <- system.time({finite_sample_classical_res <- run_mann_whitney_test_permutations(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
alpha = 0.1,
adaptive_permutation_test = FALSE)})
finite_sample_classical_res
asymptotic_res
0.001
1/0.001
library(robustDESeq)
library(airway)
data("airway")
offsite_dir <- .get_config_path("LOCAL_SEQUENTIAL_TEST_DATA_DIR")
source("~/.Rprofile")
load_all()
load_all("~/research_code/robustDESeq/")
library(robustDESeq)
library(airway)
data("airway")
offsite_dir <- .get_config_path("LOCAL_SEQUENTIAL_TEST_DATA_DIR")
# obtain the expression matrix
expression_matrix <- assays(airway)$counts
# compute the lib sizes
lib_sizes <- colSums(expression_matrix)
# determine the genes with zero expression across samples; remove those
zero_gene <- apply(X = expression_matrix, MARGIN = 1, FUN = function(r) all(r == 0))
expression_matrix <- expression_matrix[!zero_gene,]
# normalize the counts by dividing by the library size
expression_matrix_norm <- apply(X = expression_matrix, MARGIN = 1, FUN = function(r) {
(r/lib_sizes) * 10000
}) |> t()
# extract each of the genes
Y_list <- apply(X = expression_matrix_norm, MARGIN = 1, identity, simplify = FALSE)
Y_list <- Y_list[1:5000]
# obtain the treatment idx
x <- as.integer(colData(airway)$dex == "trt")
x
y
y <- Y_list[[7]]
y
x
my_mw_test <- function(y, x) {
s_trt <- y[x == 1L]
s_cntrl <- y[x == 0L]
combined <- c(s_trt, s_cntrl)
r <- rank(combined)
n_s_trt <- length(s_trt)
n_s_cntrl <- length(s_cntrl)
statistic <- sum(r[seq_along(s_trt)]) - n_s_trt * (n_s_trt + 1)/2
n_ties <- table(r)
statistic_zero <- statistic - n_s_trt * n_s_cntrl/2
sigma <- sqrt((n_s_trt * n_s_cntrl/12) * ((n_s_trt + n_s_cntrl + 1) - sum(n_ties^3 - n_ties)/((n_s_trt + n_s_cntrl) * (n_s_trt + n_s_cntrl - 1))))
correction <- switch(side, two_tailed = sign(statistic_zero) * 0.5, right = 0.5, left = -0.5)
z <- (statistic_zero - correction)/sigma
}
my_mw_test(y, x)
my_mw_test <- function(y, x, side = "two_tailed") {
s_trt <- y[x == 1L]
s_cntrl <- y[x == 0L]
combined <- c(s_trt, s_cntrl)
r <- rank(combined)
n_s_trt <- length(s_trt)
n_s_cntrl <- length(s_cntrl)
statistic <- sum(r[seq_along(s_trt)]) - n_s_trt * (n_s_trt + 1)/2
n_ties <- table(r)
statistic_zero <- statistic - n_s_trt * n_s_cntrl/2
sigma <- sqrt((n_s_trt * n_s_cntrl/12) * ((n_s_trt + n_s_cntrl + 1) - sum(n_ties^3 - n_ties)/((n_s_trt + n_s_cntrl) * (n_s_trt + n_s_cntrl - 1))))
correction <- switch(side, two_tailed = sign(statistic_zero) * 0.5, right = 0.5, left = -0.5)
z <- (statistic_zero - correction)/sigma
}
my_mw_test(y, x)
my_mw_test <- function(y, x, side = "two_tailed") {
s_trt <- y[x == 1L]
s_cntrl <- y[x == 0L]
combined <- c(s_trt, s_cntrl)
r <- rank(combined)
n_s_trt <- length(s_trt)
n_s_cntrl <- length(s_cntrl)
statistic <- sum(r[seq_along(s_trt)]) - n_s_trt * (n_s_trt + 1)/2
n_ties <- table(r)
statistic_zero <- statistic - n_s_trt * n_s_cntrl/2
sigma <- sqrt((n_s_trt * n_s_cntrl/12) * ((n_s_trt + n_s_cntrl + 1) - sum(n_ties^3 - n_ties)/((n_s_trt + n_s_cntrl) * (n_s_trt + n_s_cntrl - 1))))
correction <- switch(side, two_tailed = sign(statistic_zero) * 0.5, right = 0.5, left = -0.5)
z <- (statistic_zero - correction)/sigma
return(z)
}
my_mw_test(y, x)
z <- my_mw_test(y, x)
pnorm(q = abs(z), lower.tail = FALSE)
2 * pnorm(q = abs(z), lower.tail = FALSE)
# asymptotic test
my_mw_test(y, x)
# asymptotic test
z <- my_mw_test(y, x)
p_asy <- 2 * pnorm(q = abs(z), lower.tail = FALSE)
p_asy
# asymptotic test; p = 0.03
z <- my_mw_test(y, x)
p_asy <- 2 * pnorm(q = abs(z), lower.tail = FALSE)
install.packages("combinat")
z
x
# calculate permutation distribution
sample(x)
# calculate permutation distribution
sample(x)
# calculate permutation distribution
sample(x)
# calculate permutation distribution
sample(x)
# calculate permutation distribution
sample(x)
x_perm <- sample(x)
y
my_mw_test(y, x_perm)
x_perm <- sample(x)
my_mw_test(y, x_perm)
# calculate permutation distribution
perm_dist <- replicate(n = 50000, expr = {
x_perm <- sample(x)
my_mw_test(y, x_perm)
})
unique(perm_dist)
unique(perm_dist) |> length()
hist(perm_dist)
choose(50,25)
choose(50,25)
choose(16,8)
choose(20,10)
z
perm_dist
z
choose(8,4)
1/70
1/70
# asymptotic test; p = 0.03
z <- my_mw_test(y, x)
p_asy <- 2 * pnorm(q = abs(z), lower.tail = FALSE)
p_asy
choose(16,8)
1/choose(16,8)
1/choose(8,4)
library(robustDESeq)
library(airway)
data("airway")
offsite_dir <- .get_config_path("LOCAL_SEQUENTIAL_TEST_DATA_DIR")
# obtain the expression matrix
expression_matrix <- assays(airway)$counts
# compute the lib sizes
lib_sizes <- colSums(expression_matrix)
# determine the genes with zero expression across samples; remove those
zero_gene <- apply(X = expression_matrix, MARGIN = 1, FUN = function(r) all(r == 0))
expression_matrix <- expression_matrix[!zero_gene,]
# normalize the counts by dividing by the library size
expression_matrix_norm <- apply(X = expression_matrix, MARGIN = 1, FUN = function(r) {
(r/lib_sizes) * 10000
}) |> t()
# extract each of the genes
Y_list <- apply(X = expression_matrix_norm, MARGIN = 1, identity, simplify = FALSE)
Y_list <- Y_list[1:5000]
# obtain the treatment idx
x <- as.integer(colData(airway)$dex == "trt")
print("Running asymptotic test")
asymptotic_time <- system.time({asymptotic_res <- run_mann_whitney_test_asymptotic(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
implementation = "custom",
alpha = 0.1)})
print("Running adaptive finite sample test")
finite_sample_adaptive_time <- system.time({finite_sample_adaptive_res <- run_mann_whitney_test_permutations(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
h = 15,
alpha = 0.1,
adaptive_permutation_test = TRUE)})
print("Running classical finite sample test")
finite_sample_classical_time <- system.time({finite_sample_classical_res <- run_mann_whitney_test_permutations(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
alpha = 0.1,
adaptive_permutation_test = FALSE)})
# obtain the expression matrix
expression_matrix <- assays(airway)$counts
# compute the lib sizes
lib_sizes <- colSums(expression_matrix)
# determine the genes with zero expression across samples; remove those
zero_gene <- apply(X = expression_matrix, MARGIN = 1, FUN = function(r) all(r == 0))
expression_matrix <- expression_matrix[!zero_gene,]
# normalize the counts by dividing by the library size
expression_matrix_norm <- apply(X = expression_matrix, MARGIN = 1, FUN = function(r) {
(r/lib_sizes) * 10000
}) |> t()
# extract each of the genes
Y_list <- apply(X = expression_matrix_norm, MARGIN = 1, identity, simplify = FALSE)
Y_list <- Y_list[1:500]
# obtain the treatment idx
x <- as.integer(colData(airway)$dex == "trt")
print("Running asymptotic test")
asymptotic_time <- system.time({asymptotic_res <- run_mann_whitney_test_asymptotic(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
implementation = "custom",
alpha = 0.1)})
print("Running adaptive finite sample test")
finite_sample_adaptive_time <- system.time({finite_sample_adaptive_res <- run_mann_whitney_test_permutations(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
h = 15,
alpha = 0.1,
adaptive_permutation_test = TRUE)})
print("Running classical finite sample test")
finite_sample_classical_time <- system.time({finite_sample_classical_res <- run_mann_whitney_test_permutations(Y_list = Y_list,
x = x,
Z = NULL,
side = "two_tailed",
alpha = 0.1,
adaptive_permutation_test = FALSE)})
head(finite_sample_classical_res)
finite_sample_classical_res
head(finite_sample_classical_res)
head(finite_sample_adaptive_res)
load_all()
1/70
choose(8,4)
1 / (1 + choose(8,4))
2 / (1 + choose(8,4))
2 / (choose(8,4))
2 / (choose(8,4) + 1)
load_all()
1e6
60
1e+06/60
